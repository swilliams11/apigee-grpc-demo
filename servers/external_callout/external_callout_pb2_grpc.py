# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import external_callout_pb2 as external__callout__pb2

GRPC_GENERATED_VERSION = '1.65.4'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in external_callout_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class ExternalCalloutServiceStub(object):
    """The ExternalCalloutService can be used to build gRPC-based Apigee Edge
    policies.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessMessage = channel.unary_unary(
                '/apigee.ExternalCalloutService/ProcessMessage',
                request_serializer=external__callout__pb2.MessageContext.SerializeToString,
                response_deserializer=external__callout__pb2.MessageContext.FromString,
                _registered_method=True)


class ExternalCalloutServiceServicer(object):
    """The ExternalCalloutService can be used to build gRPC-based Apigee Edge
    policies.
    """

    def ProcessMessage(self, request, context):
        """This method takes a MessageContext and returns a modified MessageContext.
        See the commentary on MessageContext for how to use it.

        The exceptions thrown by the implementation of the gRPC service will be
        translated into faults by the Message Processor.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExternalCalloutServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessMessage,
                    request_deserializer=external__callout__pb2.MessageContext.FromString,
                    response_serializer=external__callout__pb2.MessageContext.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'apigee.ExternalCalloutService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('apigee.ExternalCalloutService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ExternalCalloutService(object):
    """The ExternalCalloutService can be used to build gRPC-based Apigee Edge
    policies.
    """

    @staticmethod
    def ProcessMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/apigee.ExternalCalloutService/ProcessMessage',
            external__callout__pb2.MessageContext.SerializeToString,
            external__callout__pb2.MessageContext.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
